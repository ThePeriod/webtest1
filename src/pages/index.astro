---
import Layout from '../layouts/Layout.astro';
import LoadingScreen from '../components/LoadingScreen.astro';
import DarkModeToggle from '../components/DarkModeToggle.astro';
import { isSupabaseConfigured } from '../lib/supabase';
import '@fontsource/dm-sans';

const isConfigured = isSupabaseConfigured();
---

<Layout title="Login - Edu Compliance">
  <LoadingScreen />
  <DarkModeToggle />
  
  <main class="min-h-screen flex bg-gradient-to-br from-primary-100 to-primary-300 dark:from-primary-800 dark:to-primary-900">
    <div class="w-1/4 p-8 bg-white dark:bg-gray-800 flex flex-col justify-center">
      <div class="max-w-sm mx-auto w-full">
        <h1 class="text-3xl font-bold mb-8 text-primary-600 dark:text-primary-300 font-dm-sans">Iniciar Sesión</h1>
        
        {!isConfigured && (
          <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
            <p class="font-bold">Error de Configuración</p>
            <p class="text-sm">La conexión con Supabase no está configurada. Por favor, configure las variables de entorno.</p>
          </div>
        )}
        
        <form id="login-form" class="space-y-6">
          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 font-dm-sans" for="email">
              Correo Electrónico
            </label>
            <input
              type="email"
              id="email"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              required
              disabled={!isConfigured}
            />
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 font-dm-sans" for="password">
              Contraseña
            </label>
            <input
              type="password"
              id="password"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              required
              disabled={!isConfigured}
            />
          </div>
          
          <div id="error-message" class="text-red-500 text-sm hidden"></div>
          
          <button
            type="submit"
            class="w-full py-2 px-4 bg-primary-500 hover:bg-primary-600 text-white font-medium rounded-lg transition-colors font-dm-sans disabled:opacity-50 disabled:cursor-not-allowed"
            disabled={!isConfigured}
          >
            Ingresar
          </button>
        </form>
      </div>
    </div>
    
    <div class="w-3/4 relative bg-cover bg-center" style="background-image: url('https://images.unsplash.com/photo-1497864149936-d3163f0c0f4b?ixlib=rb-1.2.1&auto=format&fit=crop&w=1950&q=80');">
      <div class="absolute inset-0 bg-primary-900/50"></div>
      <div class="absolute bottom-0 left-0 right-0 p-12 text-white">
        <h2 class="text-4xl font-bold mb-4 font-dm-sans">Innovamos, compartimos y colaboramos</h2>
        <p class="text-xl font-dm-sans">en la gestión institucional</p>
      </div>
    </div>
  </main>
</Layout>

<script>
  const form = document.getElementById('login-form');
  const errorMessage = document.getElementById('error-message');

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    try {
      const email = (document.getElementById('email') as HTMLInputElement).value;
      const password = (document.getElementById('password') as HTMLInputElement).value;
      
      const { createClient } = await import('@supabase/supabase-js');
      const supabase = createClient(
        import.meta.env.PUBLIC_SUPABASE_URL,
        import.meta.env.PUBLIC_SUPABASE_ANON_KEY
      );

      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password
      });

      if (error) throw error;

      if (data.session) {
        window.location.href = '/dashboard';
      }
    } catch (error: any) {
      if (errorMessage) {
        let message = 'Error al iniciar sesión. ';
        
        if (error.message.includes('Invalid login credentials')) {
          message += 'Credenciales inválidas.';
        } else if (error.message.includes('Email not confirmed')) {
          message += 'Por favor, confirma tu correo electrónico.';
        } else if (error.message.includes('Too many requests')) {
          message += 'Demasiados intentos. Por favor, espera unos minutos.';
        } else {
          message += 'Por favor, verifica tus credenciales.';
        }
        
        errorMessage.textContent = message;
        errorMessage.classList.remove('hidden');
      }
      console.error('Error:', error.message);
    }
  });
</script>

<style>
  input:focus {
    outline: none;
  }
</style>